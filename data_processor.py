import pandas as pd
import pickle
import plotly.express as px

def processor(df, master_counter, time_step, display_stats=True, supress_output=False, top_num=10):

    # cuts out top words based on top_num
    top_words = master_counter.most_common(top_num)
    # extracts words (removing frequency count from list)
    to_keep = [w[0] for w in top_words]
    
    # removes messages not in to_keep
    for i in df.iloc:
        name = i['name']
        if name not in to_keep:
            # removes names from df if they aren't in the to_keep list
            df = df[df.name != name]

            if not supress_output:
                print(f'Removed {name}')

    # resets index numbers
    df = df.reset_index().drop(columns=['index'])
    
    if not supress_output:
        print('Adding zeros...')
    
    unique_words = set(df['name'])
    
    max_time = int(df.iloc[-1]['time'])
    time_step = int(time_step)

    # adds frequency 0 to times when messages have no data
    for t in range(0, max_time + time_step, time_step):
        sliced_df = df.loc[df['time'] == t]
        for w in unique_words:
            names = sliced_df['name'].values
            if w not in names:
                df.loc[len(df)] = [w, t, 0]
                if not supress_output:
                    print(f'Added {w} at {t}')

    if not supress_output:
        print('Done')
        print('Resorting...')
    
    # creates a priority order dictionary which gives the lowest priority (0) to the word with the highest total frequency
    priority_order = {word[0]:priority for priority, word in enumerate(master_counter.most_common())}
    
    # helper function for dataframe map
    def get_total(name):
        return priority_order[name]

    # adds priority column to df
    df['priority'] = df['name'].map(get_total)

    # resorts by time and priority
    # in each time step, words are sorted by their total count over the entire time period
    # this is added so that plotly's autogenerated legend will rank show the words from most to least frequent
    df = df.sort_values(by=['time', 'priority'])
    df = df.reset_index().drop(columns=['index'])

    if not supress_output:
        print('Done')

    # calculates and display statistics
    if display_stats:
        total_msg_count = sum(master_counter.values())
        average_msgs = total_msg_count / (max_time + time_step)
        print()
        print('Displaying stats')
        print(f'Total messages: {total_msg_count}')
        print(f'Average number of messages per second: {average_msgs}')
        print('Top words:')
        for w in top_words:
            name = w[0]
            freq = w[1]
            print(f'{name} x {freq}')

    return df

# following code only runs if you run data_processor specifically
if __name__ == "__main__":
    print('Twitch Data Processor')
    print('Enter a file name:')
    f_name = input('> ')

    while True:
        print('How many unique messages should be saved?')
        print('(If you enter 10, all but the top 10 most freq messages will be deleted)')
        try:
            top_num = int(input('> '))
        except ValueError:
            continue
        break

    print('Enter a save file name:')
    print('(or enter to use same name)')
    save_name = input('> ')
    if save_name == '':
        save_name = f_name

    with open(f_name + '.raw', 'rb') as f:
        loaded = pickle.load(f)

    df, master_counter, time_step = loaded
    df_processed = processor(df, master_counter, time_step, top_num=top_num ,supress_output=False)
    saved_data = df_processed, master_counter

    with open(save_name + '.ttv', 'wb') as f:
        pickle.dump(saved_data, f)